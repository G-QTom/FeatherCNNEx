// Generated from caffe.proto

namespace caffe.FillerParameter_;

enum VarianceNorm : int {
  FAN_IN = 0,
  FAN_OUT = 1,
  AVERAGE = 2,
}

namespace caffe.SolverParameter_;

enum SnapshotFormat : int {
  HDF5 = 0,
  BINARYPROTO = 1,
}

enum SolverMode : int {
  CPU = 0,
  GPU = 1,
}

enum SolverType : int {
  SGD = 0,
  NESTEROV = 1,
  ADAGRAD = 2,
  RMSPROP = 3,
  ADADELTA = 4,
  ADAM = 5,
}

namespace caffe;

enum Phase : int {
  TRAIN = 0,
  TEST = 1,
}

namespace caffe.ParamSpec_;

enum DimCheckMode : int {
  STRICT = 0,
  PERMISSIVE = 1,
}

namespace caffe.LossParameter_;

enum NormalizationMode : int {
  FULL = 0,
  VALID = 1,
  BATCH_SIZE = 2,
  NONE = 3,
}

namespace caffe.ConvolutionParameter_;

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.DataParameter_;

enum DB : int {
  LEVELDB = 0,
  LMDB = 1,
}

namespace caffe.EltwiseParameter_;

enum EltwiseOp : int {
  PROD = 0,
  SUM = 1,
  MAX = 2,
}

namespace caffe.HingeLossParameter_;

enum Norm : int {
  L1 = 1,
  L2 = 2,
}

namespace caffe.LRNParameter_;

enum NormRegion : int {
  ACROSS_CHANNELS = 0,
  WITHIN_CHANNEL = 1,
}

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.PoolingParameter_;

enum PoolMethod : int {
  MAX = 0,
  AVE = 1,
  STOCHASTIC = 2,
}

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.ReductionParameter_;

enum ReductionOp : int {
  SUM = 1,
  ASUM = 2,
  SUMSQ = 3,
  MEAN = 4,
}

namespace caffe.ReLUParameter_;

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.SigmoidParameter_;

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.SoftmaxParameter_;

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.TanHParameter_;

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.SPPParameter_;

enum PoolMethod : int {
  MAX = 0,
  AVE = 1,
  STOCHASTIC = 2,
}

enum Engine : int {
  DEFAULT = 0,
  CAFFE = 1,
  CUDNN = 2,
}

namespace caffe.V1LayerParameter_;

enum LayerType : int {
  NONE = 0,
  ACCURACY = 1,
  BNLL = 2,
  CONCAT = 3,
  CONVOLUTION = 4,
  DATA = 5,
  DROPOUT = 6,
  EUCLIDEAN_LOSS = 7,
  FLATTEN = 8,
  HDF5_DATA = 9,
  HDF5_OUTPUT = 10,
  IM2COL = 11,
  IMAGE_DATA = 12,
  INFOGAIN_LOSS = 13,
  INNER_PRODUCT = 14,
  LRN = 15,
  MULTINOMIAL_LOGISTIC_LOSS = 16,
  POOLING = 17,
  RELU = 18,
  SIGMOID = 19,
  SOFTMAX = 20,
  SOFTMAX_LOSS = 21,
  SPLIT = 22,
  TANH = 23,
  WINDOW_DATA = 24,
  ELTWISE = 25,
  POWER = 26,
  SIGMOID_CROSS_ENTROPY_LOSS = 27,
  HINGE_LOSS = 28,
  MEMORY_DATA = 29,
  ARGMAX = 30,
  THRESHOLD = 31,
  DUMMY_DATA = 32,
  SLICE = 33,
  MVN = 34,
  ABSVAL = 35,
  SILENCE = 36,
  CONTRASTIVE_LOSS = 37,
  EXP = 38,
  DECONVOLUTION = 39,
}

enum DimCheckMode : int {
  STRICT = 0,
  PERMISSIVE = 1,
}

namespace caffe.V0LayerParameter_;

enum PoolMethod : int {
  MAX = 0,
  AVE = 1,
  STOCHASTIC = 2,
}

namespace caffe;

table BlobShape {
  dim:[long];
}

table BlobProto {
  shape:caffe.BlobShape;
  data:[float];
  diff:[float];
  double_data:[double];
  double_diff:[double];
  num:int;
  channels:int;
  height:int;
  width:int;
}

table BlobProtoVector {
  blobs:[caffe.BlobProto];
}

table Datum {
  channels:int;
  height:int;
  width:int;
  data:[ubyte];
  label:int;
  float_data:[float];
  encoded:bool;
}

table FillerParameter {
  type:string;
  value:float;
  min:float;
  max:float = 1;
  mean:float;
  std:float = 1;
  sparse:int = -1;
  variance_norm:caffe.FillerParameter_.VarianceNorm;
}

table NetParameter {
  name:string;
  input:[string];
  input_shape:[caffe.BlobShape];
  input_dim:[int];
  force_backward:bool;
  state:caffe.NetState;
  debug_info:bool;
  layer:[caffe.LayerParameter];
  layers:[caffe.V1LayerParameter];
}

table SolverParameter {
  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////
  net:string;
  net_param:caffe.NetParameter;
  train_net:string;
  test_net:[string];
  train_net_param:caffe.NetParameter;
  test_net_param:[caffe.NetParameter];
  train_state:caffe.NetState;
  test_state:[caffe.NetState];
  test_iter:[int];
  test_interval:int;
  test_compute_loss:bool;
  test_initialization:bool;
  base_lr:float;
  display:int;
  average_loss:int = 1;
  max_iter:int;
  iter_size:int = 1;
  lr_policy:string;
  gamma:float;
  power:float;
  momentum:float;
  weight_decay:float;
  regularization_type:string;
  stepsize:int;
  stepvalue:[int];
  clip_gradients:float = -1;
  snapshot:int;
  snapshot_prefix:string;
  snapshot_diff:bool;
  snapshot_format:caffe.SolverParameter_.SnapshotFormat;
  solver_mode:caffe.SolverParameter_.SolverMode;
  device_id:int;
  random_seed:long = -1;
  type:string;
  delta:float = 1e-8;
  momentum2:float = 0.999;
  rms_decay:float = 0.99;
  debug_info:bool;
  snapshot_after_train:bool;
  solver_type:caffe.SolverParameter_.SolverType;
  layer_wise_reduce:bool;
}

table SolverState {
  iter:int;
  learned_net:string;
  history:[caffe.BlobProto];
  current_step:int;
}

table NetState {
  phase:caffe.Phase;
  level:int;
  stage:[string];
}

table NetStateRule {
  phase:caffe.Phase;
  min_level:int;
  max_level:int;
  stage:[string];
  not_stage:[string];
}

table ParamSpec {
  name:string;
  share_mode:caffe.ParamSpec_.DimCheckMode;
  lr_mult:float = 1.0;
  decay_mult:float = 1.0;
}

table LayerParameter {
  name:string;
  type:string;
  bottom:[string];
  top:[string];
  phase:caffe.Phase;
  loss_weight:[float];
  param:[caffe.ParamSpec];
  blobs:[caffe.BlobProto];
  propagate_down:[bool];
  include:[caffe.NetStateRule];
  exclude:[caffe.NetStateRule];
  transform_param:caffe.TransformationParameter;
  loss_param:caffe.LossParameter;
  accuracy_param:caffe.AccuracyParameter;
  argmax_param:caffe.ArgMaxParameter;
  batch_norm_param:caffe.BatchNormParameter;
  bias_param:caffe.BiasParameter;
  concat_param:caffe.ConcatParameter;
  contrastive_loss_param:caffe.ContrastiveLossParameter;
  convolution_param:caffe.ConvolutionParameter;
  crop_param:caffe.CropParameter;
  data_param:caffe.DataParameter;
  dropout_param:caffe.DropoutParameter;
  dummy_data_param:caffe.DummyDataParameter;
  eltwise_param:caffe.EltwiseParameter;
  elu_param:caffe.ELUParameter;
  embed_param:caffe.EmbedParameter;
  exp_param:caffe.ExpParameter;
  flatten_param:caffe.FlattenParameter;
  hdf5_data_param:caffe.HDF5DataParameter;
  hdf5_output_param:caffe.HDF5OutputParameter;
  hinge_loss_param:caffe.HingeLossParameter;
  image_data_param:caffe.ImageDataParameter;
  infogain_loss_param:caffe.InfogainLossParameter;
  inner_product_param:caffe.InnerProductParameter;
  input_param:caffe.InputParameter;
  log_param:caffe.LogParameter;
  lrn_param:caffe.LRNParameter;
  memory_data_param:caffe.MemoryDataParameter;
  mvn_param:caffe.MVNParameter;
  parameter_param:caffe.ParameterParameter;
  pooling_param:caffe.PoolingParameter;
  power_param:caffe.PowerParameter;
  prelu_param:caffe.PReLUParameter;
  python_param:caffe.PythonParameter;
  recurrent_param:caffe.RecurrentParameter;
  reduction_param:caffe.ReductionParameter;
  relu_param:caffe.ReLUParameter;
  reshape_param:caffe.ReshapeParameter;
  scale_param:caffe.ScaleParameter;
  sigmoid_param:caffe.SigmoidParameter;
  softmax_param:caffe.SoftmaxParameter;
  spp_param:caffe.SPPParameter;
  slice_param:caffe.SliceParameter;
  tanh_param:caffe.TanHParameter;
  threshold_param:caffe.ThresholdParameter;
  tile_param:caffe.TileParameter;
  window_data_param:caffe.WindowDataParameter;
}

table TransformationParameter {
  scale:float = 1;
  mirror:bool;
  crop_size:uint;
  mean_file:string;
  mean_value:[float];
  force_color:bool;
  force_gray:bool;
}

table LossParameter {
  ignore_label:int;
  normalization:caffe.LossParameter_.NormalizationMode;
  normalize:bool;
}

table AccuracyParameter {
  top_k:uint = 1;
  axis:int = 1;
  ignore_label:int;
}

table ArgMaxParameter {
  out_max_val:bool;
  top_k:uint = 1;
  axis:int;
}

table ConcatParameter {
  axis:int = 1;
  concat_dim:uint = 1;
}

table BatchNormParameter {
  use_global_stats:bool;
  moving_average_fraction:float = 0.999;
  eps:float = 1e-5;
}

table BiasParameter {
  axis:int = 1;
  num_axes:int = 1;
  filler:caffe.FillerParameter;
}

table ContrastiveLossParameter {
  margin:float = 1.0;
  legacy_version:bool;
}

table ConvolutionParameter {
  num_output:uint;
  bias_term:bool;
  pad:[uint];
  kernel_size:[uint];
  stride:[uint];
  dilation:[uint];
  pad_h:uint;
  pad_w:uint;
  kernel_h:uint;
  kernel_w:uint;
  stride_h:uint;
  stride_w:uint;
  group:uint = 1;
  weight_filler:caffe.FillerParameter;
  bias_filler:caffe.FillerParameter;
  engine:caffe.ConvolutionParameter_.Engine;
  axis:int = 1;
  force_nd_im2col:bool;
}

table CropParameter {
  axis:int = 2;
  offset:[uint];
}

table DataParameter {
  source:string;
  batch_size:uint;
  rand_skip:uint;
  backend:caffe.DataParameter_.DB;
  scale:float = 1;
  mean_file:string;
  crop_size:uint;
  mirror:bool;
  force_encoded_color:bool;
  prefetch:uint = 4;
}

table DropoutParameter {
  dropout_ratio:float = 0.5;
}

table DummyDataParameter {
  data_filler:[caffe.FillerParameter];
  shape:[caffe.BlobShape];
  num:[uint];
  channels:[uint];
  height:[uint];
  width:[uint];
}

table EltwiseParameter {
  operation:caffe.EltwiseParameter_.EltwiseOp;
  coeff:[float];
  stable_prod_grad:bool;
}

table ELUParameter {
  alpha:float = 1;
}

table EmbedParameter {
  num_output:uint;
  input_dim:uint;
  bias_term:bool;
  weight_filler:caffe.FillerParameter;
  bias_filler:caffe.FillerParameter;
}

table ExpParameter {
  base:float = -1.0;
  scale:float = 1.0;
  shift:float = 0.0;
}

/// Message that stores parameters used by FlattenLayer
table FlattenParameter {
  axis:int = 1;
  end_axis:int = -1;
}

table HDF5DataParameter {
  source:string;
  batch_size:uint;
  shuffle:bool;
}

table HDF5OutputParameter {
  file_name:string;
}

table HingeLossParameter {
  norm:caffe.HingeLossParameter_.Norm;
}

table ImageDataParameter {
  source:string;
  batch_size:uint = 1;
  rand_skip:uint;
  shuffle:bool;
  new_height:uint;
  new_width:uint;
  is_color:bool;
  scale:float = 1;
  mean_file:string;
  crop_size:uint;
  mirror:bool;
  root_folder:string;
}

table InfogainLossParameter {
  source:string;
  axis:int = 1;
}

table InnerProductParameter {
  num_output:uint;
  bias_term:bool;
  weight_filler:caffe.FillerParameter;
  bias_filler:caffe.FillerParameter;
  axis:int = 1;
  transpose:bool;
}

table InputParameter {
  shape:[caffe.BlobShape];
}

table LogParameter {
  base:float = -1.0;
  scale:float = 1.0;
  shift:float = 0.0;
}

table LRNParameter {
  local_size:uint = 5;
  alpha:float = 1.;
  beta:float = 0.75;
  norm_region:caffe.LRNParameter_.NormRegion;
  k:float = 1.;
  engine:caffe.LRNParameter_.Engine;
}

table MemoryDataParameter {
  batch_size:uint;
  channels:uint;
  height:uint;
  width:uint;
}

table MVNParameter {
  normalize_variance:bool;
  across_channels:bool;
  eps:float = 1e-9;
}

table ParameterParameter {
  shape:caffe.BlobShape;
}

table PoolingParameter {
  pool:caffe.PoolingParameter_.PoolMethod;
  pad:uint;
  pad_h:uint;
  pad_w:uint;
  kernel_size:uint;
  kernel_h:uint;
  kernel_w:uint;
  stride:uint = 1;
  stride_h:uint;
  stride_w:uint;
  engine:caffe.PoolingParameter_.Engine;
  global_pooling:bool;
}

table PowerParameter {
  power:float = 1.0;
  scale:float = 1.0;
  shift:float = 0.0;
}

table PythonParameter {
  module:string;
  layer:string;
  param_str:string;
  share_in_parallel:bool;
}

table RecurrentParameter {
  num_output:uint;
  weight_filler:caffe.FillerParameter;
  bias_filler:caffe.FillerParameter;
  debug_info:bool;
  expose_hidden:bool;
}

table ReductionParameter {
  operation:caffe.ReductionParameter_.ReductionOp;
  axis:int;
  coeff:float = 1.0;
}

table ReLUParameter {
  negative_slope:float;
  engine:caffe.ReLUParameter_.Engine;
}

table ReshapeParameter {
  shape:caffe.BlobShape;
  axis:int;
  num_axes:int = -1;
}

table ScaleParameter {
  axis:int = 1;
  num_axes:int = 1;
  filler:caffe.FillerParameter;
  bias_term:bool;
  bias_filler:caffe.FillerParameter;
}

table SigmoidParameter {
  engine:caffe.SigmoidParameter_.Engine;
}

table SliceParameter {
  axis:int = 1;
  slice_point:[uint];
  slice_dim:uint = 1;
}

table SoftmaxParameter {
  engine:caffe.SoftmaxParameter_.Engine;
  axis:int = 1;
}

table TanHParameter {
  engine:caffe.TanHParameter_.Engine;
}

table TileParameter {
  axis:int = 1;
  tiles:int;
}

table ThresholdParameter {
  threshold:float;
}

table WindowDataParameter {
  source:string;
  scale:float = 1;
  mean_file:string;
  batch_size:uint;
  crop_size:uint;
  mirror:bool;
  fg_threshold:float = 0.5;
  bg_threshold:float = 0.5;
  fg_fraction:float = 0.25;
  context_pad:uint;
  crop_mode:string;
  cache_images:bool;
  root_folder:string;
}

table SPPParameter {
  pyramid_height:uint;
  pool:caffe.SPPParameter_.PoolMethod;
  engine:caffe.SPPParameter_.Engine;
}

table V1LayerParameter {
  bottom:[string];
  top:[string];
  name:string;
  include:[caffe.NetStateRule];
  exclude:[caffe.NetStateRule];
  type:caffe.V1LayerParameter_.LayerType;
  blobs:[caffe.BlobProto];
  param:[string];
  blob_share_mode:[caffe.ParamSpec_.DimCheckMode];
  blobs_lr:[float];
  weight_decay:[float];
  loss_weight:[float];
  accuracy_param:caffe.AccuracyParameter;
  argmax_param:caffe.ArgMaxParameter;
  concat_param:caffe.ConcatParameter;
  contrastive_loss_param:caffe.ContrastiveLossParameter;
  convolution_param:caffe.ConvolutionParameter;
  data_param:caffe.DataParameter;
  dropout_param:caffe.DropoutParameter;
  dummy_data_param:caffe.DummyDataParameter;
  eltwise_param:caffe.EltwiseParameter;
  exp_param:caffe.ExpParameter;
  hdf5_data_param:caffe.HDF5DataParameter;
  hdf5_output_param:caffe.HDF5OutputParameter;
  hinge_loss_param:caffe.HingeLossParameter;
  image_data_param:caffe.ImageDataParameter;
  infogain_loss_param:caffe.InfogainLossParameter;
  inner_product_param:caffe.InnerProductParameter;
  lrn_param:caffe.LRNParameter;
  memory_data_param:caffe.MemoryDataParameter;
  mvn_param:caffe.MVNParameter;
  pooling_param:caffe.PoolingParameter;
  power_param:caffe.PowerParameter;
  relu_param:caffe.ReLUParameter;
  sigmoid_param:caffe.SigmoidParameter;
  softmax_param:caffe.SoftmaxParameter;
  slice_param:caffe.SliceParameter;
  tanh_param:caffe.TanHParameter;
  threshold_param:caffe.ThresholdParameter;
  window_data_param:caffe.WindowDataParameter;
  transform_param:caffe.TransformationParameter;
  loss_param:caffe.LossParameter;
  layer:caffe.V0LayerParameter;
}

table V0LayerParameter {
  name:string;
  type:string;
  num_output:uint;
  biasterm:bool;
  weight_filler:caffe.FillerParameter;
  bias_filler:caffe.FillerParameter;
  pad:uint;
  kernelsize:uint;
  group:uint = 1;
  stride:uint = 1;
  pool:caffe.V0LayerParameter_.PoolMethod;
  dropout_ratio:float = 0.5;
  local_size:uint = 5;
  alpha:float = 1.;
  beta:float = 0.75;
  k:float = 1.;
  source:string;
  scale:float = 1;
  meanfile:string;
  batchsize:uint;
  cropsize:uint;
  mirror:bool;
  blobs:[caffe.BlobProto];
  blobs_lr:[float];
  weight_decay:[float];
  rand_skip:uint;
  det_fg_threshold:float = 0.5;
  det_bg_threshold:float = 0.5;
  det_fg_fraction:float = 0.25;
  det_context_pad:uint;
  det_crop_mode:string;
  new_num:int;
  new_channels:int;
  new_height:int;
  new_width:int;
  shuffle_images:bool;
  concat_dim:uint = 1;
  hdf5_output_param:caffe.HDF5OutputParameter;
}

table PReLUParameter {
  filler:caffe.FillerParameter;
  channel_shared:bool;
}

